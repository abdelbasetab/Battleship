type: edu
custom_name: Take position!
files:
  - name: src/battleship/Main.java
    visible: true
    text: |
      package battleship;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      
      public class Tests extends StageTest<String> {
        @DynamicTest
        CheckResult test1() {
      
          TestedProgram main = new TestedProgram();
          String output = main.start().trim();
          String[][] matrix;
      
          if (!output.toLowerCase().contains("aircraft carrier")) {
            return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
          }
      
          output = main.execute("F3 F7").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "F3 F7");
      
          if (!output.toLowerCase().contains("battleship")) {
            return CheckResult.wrong("After asking for the Aircraft Carrier " +
                    "coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
          }
      
          output = main.execute("A1 D1").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "A1 D1");
      
          if (!output.toLowerCase().contains("submarine")) {
            return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
          }
      
          output = main.execute("J7 J10").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("J10 J8").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "J10 J8");
      
          if (!output.toLowerCase().contains("cruiser")) {
            return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
          }
      
          output = main.execute("B9 D8").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("B9 D9").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "B9 D9");
      
          if (!output.toLowerCase().contains("destroyer")) {
            return CheckResult.wrong("After asking for the Cruiser coordinates, " +
                    "you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
          }
      
          output = main.execute("E6 D6").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong(
                    "Your program should not print a game field " +
                            "if there is an input mistake. " +
                            "(Too close to another ship)");
          }
      
          if (!output.toLowerCase().contains("error")) {
            return CheckResult.wrong(
                    "Your program should report an error " +
                            "if there is an input mistake. " +
                            "(Too close to another ship)");
          }
      
          output = main.execute("I2 J2").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "I2 J2");
      
          return CheckResult.correct();
        }
      
        @DynamicTest
        CheckResult test2() {
      
          TestedProgram main = new TestedProgram();
          String output = main.start().trim();
          String[][] matrix;
      
          if (!output.toLowerCase().contains("aircraft carrier")) {
            return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
          }
      
          output = main.execute("J3 J7").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "J3 J7");
      
          if (!output.toLowerCase().contains("battleship")) {
            return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
          }
      
          output = main.execute("C8 B8").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
          }
      
          output = main.execute("C8 F8").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "C8 F8");
      
          if (!output.toLowerCase().contains("submarine")) {
            return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
          }
      
          output = main.execute("A1 C2").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
          }
      
          output = main.execute("A1 C1").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "A1 C1");
      
          if (!output.toLowerCase().contains("cruiser")) {
            return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
          }
      
          output = main.execute("H1 H3").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "H1 H3");
      
          if (!output.toLowerCase().contains("destroyer")) {
            return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
          }
      
          output = main.execute("G2 E2").trim();
          if (isGameFieldPrinted(output)) {
            return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
          }
      
          output = main.execute("B5 C5").trim();
          matrix = getFieldMatrix(output);
          findShipByCoordinates(matrix, "B5 C5");
      
          return CheckResult.correct();
        }
      
        void findShipByCoordinates(String[][] matrix, String coordinates) {
          int[] coordinatesInt = parseCoordinates(coordinates);
      
          if (coordinatesInt[0] > coordinatesInt[2]) {
            int swap = coordinatesInt[0];
            coordinatesInt[0] = coordinatesInt[2];
            coordinatesInt[2] = swap;
          } else if (coordinatesInt[1] > coordinatesInt[3]) {
            int swap = coordinatesInt[1];
            coordinatesInt[1] = coordinatesInt[3];
            coordinatesInt[3] = swap;
          }
      
          if (coordinatesInt[0] == coordinatesInt[2]) {
            int cord = coordinatesInt[0];
            for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
              if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
              }
            }
          } else {
            int cord = coordinatesInt[1];
            for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
              if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
              }
            }
          }
        }
      
        int[] parseCoordinates(String coordinatesString) {
          String[] splittedCoords = coordinatesString.split(" ");
          int[] parsedCoordinates = new int[4];
      
          parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
          parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
          parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
          parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;
      
          return parsedCoordinates;
        }
      
        int charToInt(String charCoordinate) {
          charCoordinate = charCoordinate.toLowerCase();
          char character = charCoordinate.charAt(0);
          return (int) character - (int) 'a';
        }
      
        String[][] getFieldMatrix(String output) {
      
          WrongAnswer cantParseException = new WrongAnswer(
                  "Can't parse the game field\n" +
                          "Make sure you print it like in examples!");
      
          String[] splittedOutput = output.split("\n");
          String[][] matrix = new String[10][10];
      
          try {
            int index = 0;
            while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
              index++;
              if (index > 1000) {
                throw cantParseException;
              }
            }
            index++;
      
            for (int i = 0; i < 10; i++) {
              String temp = splittedOutput[index].substring(2).trim();
              if (temp.length() == 0) {
                throw cantParseException;
              }
              String[] splittedLine = temp.trim().split(" ");
              if (splittedLine.length != 10) {
                throw cantParseException;
              }
              matrix[i] = splittedLine;
              index++;
            }
          } catch (IndexOutOfBoundsException ignored) {
            throw cantParseException;
          }
      
          return matrix;
        }
      
        boolean isGameFieldPrinted(String output) {
          return output.contains("1") && output.contains("2") && output.contains("10");
        }
      
      }
    learner_created: false
  - name: src/battleship/BattleshipGame.java
    visible: true
    text: |
      package battleship;
      
      public class BattleshipGame {
          private static final int FIELD_SIZE = 10;
          private static final char FOG_OF_WAR = '~';
          private static final char SHIP = 'O';
          private static final char HIT = 'X';
          private static final char MISS = 'M';
      
          private static char[][] gameField = new char[FIELD_SIZE][FIELD_SIZE];
      
      
          /**
           * initial Field with ~ Symbol
           */
      
          public void initializeGameField() {
              for (int i = 0; i < FIELD_SIZE; i++) {
                  for (int j = 0; j < FIELD_SIZE; j++) {
                      gameField[i][j] = FOG_OF_WAR;
                  }
              }
          }
      
          /***
           * print game Field
           */
          public  void printGameField() {
              // 1 2 3 4 5 6 7 8 9 10
              System.out.print("  ");
              for (int i = 1; i <= FIELD_SIZE; i++) {
                  System.out.print(i + " ");
              }
              System.out.println();
              // A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
              for (int i = 0; i < FIELD_SIZE; i++) {
                  System.out.print((char) ('A' + i) + " ");
                  for (int j = 0; j < FIELD_SIZE; j++) {
                      System.out.print(gameField[i][j] + " ");
                  }
                  System.out.println();
              }
          }
      
          /**
           * check if the input valid or not
           * @param startCoordinate
           * @param endCoordinate
           * @return
           */
          public  boolean isValidInput(String startCoordinate, String endCoordinate) {
              if ((startCoordinate.length() > 3 || endCoordinate.length() > 3)
              ||(startCoordinate.length() < 2 || endCoordinate.length() < 2)){
                  return false;
              }
      
              char startRow = startCoordinate.charAt(0);
              char endRow = endCoordinate.charAt(0);
              int startCol = Integer.parseInt(startCoordinate.substring(1));//Character.getNumericValue(startCoordinate.charAt(1));// todo
              int endCol = Integer.parseInt(endCoordinate.substring(1));//Character.getNumericValue(endCoordinate.charAt(1));
      
              return startRow >= 'A' && startRow <= 'J' &&
                      endRow >= 'A' && endRow <= 'J' &&
                      startCol >= 1 && startCol <= FIELD_SIZE &&
                      endCol >= 1 && endCol <= FIELD_SIZE &&
                      (startRow == endRow || startCol == endCol);
          }
      
          public  boolean placeShip(String startCoordinate, String endCoordinate) {
              char startRow = startCoordinate.charAt(0);
              char endRow = endCoordinate.charAt(0);
              int startCol = Integer.parseInt(startCoordinate.substring(1));//Character.getNumericValue(startCoordinate.charAt(1));// todo
              int endCol = Integer.parseInt(endCoordinate.substring(1));//Character.getNumericValue(endCoordinate.charAt(1));
      
              int startRowIdx = startRow - 'A';
              int startColIdx = startCol - 1;
              int endRowIdx = endRow - 'A';
              int endColIdx = endCol - 1;
              int shipLength = 0;
              if (startRow == endRow) {// A3 , A7
                  int minCol = Math.min(startColIdx, endColIdx);//7,3  = 3,7
                  int maxCol = Math.max(startColIdx, endColIdx);
      
                  // check if there is no other ship there
                  for (int j = minCol; j <= maxCol; j++) {
                      if (gameField[startRowIdx][j] != FOG_OF_WAR) {
                          return false;
                      }
                  }
      
                  for (int j = minCol; j <= maxCol; j++) {
                      gameField[startRowIdx][j] = SHIP;
                  }
              } else {
                  int minRow = Math.min(startRowIdx, endRowIdx);//
                  int maxRow = Math.max(startRowIdx, endRowIdx);
                  // check if there is no other ship there
                  for (int i = minRow; i <= maxRow; i++) {
                      if (gameField[i][startColIdx] != FOG_OF_WAR) {
                          return false;
                      }
                  }
      
                  for (int i = minRow; i <= maxRow; i++) {
                      gameField[i][startColIdx] = SHIP;
                  }
              }
      
              return true;
          }
          public  int getShipLength(String startCoordinate, String endCoordinate) {
              char startRow = startCoordinate.charAt(0);
              char endRow = endCoordinate.charAt(0);
              int startCol = Integer.parseInt(startCoordinate.substring(1));
              int endCol = Integer.parseInt(endCoordinate.substring(1));
      
              int length;
              if (startRow == endRow) {
                  length = Math.abs(endCol - startCol) + 1;
              } else {
                  length = Math.abs(endRow - startRow) + 1;
              }
      
              return length;
          }
          public  void printShipCoordinates(String startCoordinate, String endCoordinate) {
              char startRow = startCoordinate.charAt(0);
              char endRow = endCoordinate.charAt(0);
              int startCol = Integer.parseInt(startCoordinate.substring(1));
              int endCol = Integer.parseInt(endCoordinate.substring(1));
      
              if (startRow == endRow) {
                  if(startCol > endCol){
      
                      for (int j = startCol; j >= endCol; j--) {
                          System.out.print( (startRow) + "" + j + " ");
                      }
      
                  }else{
                      for (int j = startCol; j <= endCol; j++) {
                          System.out.print( (startRow) + "" + j + " ");
                      }
                  }
      
                  System.out.println();
              } else { // A3 D3
                  if(startRow > endRow){//D3 A3
      
                      for (char i = startRow; i >= endRow; i--) {
                          System.out.print(i + "" + startCol + " ");
                      }
                  }else {//A3 D3
                      for (char i = startRow; i <= endRow; i++) {
                          System.out.print(i + "" + startCol + " ");
                      }
                  }
                  System.out.println();
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/projects/383/stages/2282/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 04 Jan 2024 19:09:40 UTC"
record: -1
